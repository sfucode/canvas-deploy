<?php
/**
 * @file
 * This module provides functions
 *
 */

function _sync_courses($term) { // 1147
	// also need to convert '1147' format to Canvas term id
	$term_nid = _get_tid_from_termcode($term);
	$myTerm = node_load($term_nid);
	$canvasTerm = $myTerm->field_canvas_term_id['und'][0]['value'];
	$r = new CanvasReport();
	$r->setTermCode($canvasTerm);
	$courses = $r->getCourses();

	// TODO get array of all CIDS in system
	// new routine of CID is in both arrays

	foreach($courses as $key => $value) {
		// lookup CID in course offering ctypes
		// if exists, then send to update offering
		$nid = _get_nid_from_cid($key);
		if ($nid) {
			_update_offering($nid);
			// includes outline information
		} else {
			_prepare_offering($key);
		}
	}

}
/**
 *
 */
function _prepare_offering($cid) {
	$r = new CanvasReport();
	$r->setCourseId($cid);
	$canvas_title = $r->getNameFromCid();
	$vars = explode(" ", $canvas_title);
	$department = $vars[0];
	$courseCode = $vars[0]." ".$vars[1];
	$section = $vars[2];

	// get department tid or create term if it doesn't exist
	$departmentTid = _get_tid_from_term_name($department);

	$preterm = $r->getTermFromCid();
	$termNid = _get_term($preterm);

	$courseNid = _create_offering($courseCode, $section, $termNid, $departmentTid, $cid);
	_sync_outline($preterm); // get outline information

	return;
}

function _get_nid_from_cid($cid) {
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'eval_course_offering')
		->propertyCondition('status', 1)
		->fieldCondition('field_eval_canvas_id', 'value', $cid, '=');
	$result = $query->execute();
	if ($result) {
		$nids = array_keys($result['node']);
		return $nids[0];
	}
}

function _create_offering($courseCode, $section, $termNid, $departmentTid, $canvasCode) {
	$r = new CanvasReport();
	$r->setCourseId($canvasCode);

	global $user;
	$e = entity_create('node', array('type' => 'eval_course_offering'));
	$e->uid = '1';
	// Create an entity wrapper for the new entity
	$entity = entity_metadata_wrapper('node',$e);
	$entity->title = 'Will be replaced';
	$entity->field_eval_course_code = $courseCode;
	$entity->field_eval_section = $section;
	$entity->field_eval_department  = $departmentTid;
	$entity->field_eval_term = $termNid;
	$entity->field_eval_enrollment_count = $r->numStudents();
	$entity->field_eval_canvas_id = $canvasCode;
	$entity->field_assignments = $r->numAssignments();
	$entity->field_quizzes = $r->numQuizzes();
	$entity->field_discussions = $r->numDiscussions();
	$entity->field_workflow_state = $r->getWorkflowState();

	$entity->save();
	$returnNid = $entity->getIdentifier();
}

function _update_offering($nid) {
	$node = node_load($nid);
	$canvasCode = $node->field_eval_canvas_id['und'][0]['value'];

	$r = new CanvasReport();
	$r->setCourseId($canvasCode);

	$o = new OutlineApi();
	$title = explode(" ", $node->title);

	// get term name information
	$termId = $node->field_eval_term['und'][0]['target_id'];
	$myTerm = node_load($termId);
	$terms = explode(" ", $myTerm->title);
	$o->setYear($terms[1]); 
	$o->setTerm($terms[0]);
	$o->setDepartment($title[0]);
	$o->setNumber($title[1]);
	$o->setSection($title[2]);
	$myOutline = $o->runOutlineReport();

// api data
	$node->field_eval_enrollment_count['und'][0]['value'] = $r->numStudents();
	$node->field_assignments['und'][0]['value'] = $r->numAssignments();
	$node->field_quizzes['und'][0]['value'] = $r->numQuizzes();
	$node->field_discussions['und'][0]['value'] = $r->numDiscussions();
	$node->field_workflow_state['und'][0]['value'] = $r->getWorkflowState();
// outline data
	$node->field_name['und'][0]['value'] = $myOutline['info']['title'];
	$node->field_description['und'][0]['value'] = $myOutline['info']['description'];
	$node->field_instructor['und'][0]['value'] = $myOutline['instructor'][0]['name']; 

	$node = node_submit($node);
	node_save($node);
}
/*
 *
 */
function _get_term($termCode) {
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'eval_term')
		->propertyCondition('status', 1)
		->fieldCondition('field_eval_code', 'value', $termCode, '=')
		->addMetaData('account', user_load(1)); // Run the query as user 1.
	$result = $query->execute();
	if (isset($result['node'])) {
		$nids = array_keys($result['node']);
	}
	return $nids[0];
}

function _get_termcode_from_tid($tid) {
	$myNode = node_load($tid);
	return $myNode->field_eval_code['und'][0]['value'];
}

function _get_tid_from_termcode($termcode) { // ie 1147
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'eval_term')
		->propertyCondition('status', 1)
		->fieldCondition('field_eval_code', 'value', $termcode, '=');
	$result = $query->execute();
	$nids = array_keys($result['node']);
	return $nids[0];
}
/**
 * Return the term id for a given term name.
 */
function _get_tid_from_term_name($term_name) {
	$vocabulary = 'department';
	$arr_terms = taxonomy_get_term_by_name($term_name, $vocabulary);
	if (!empty($arr_terms)) {
		$arr_terms = array_values($arr_terms);
		$tid = $arr_terms[0]->tid;
	}
	else {
		$vobj = taxonomy_vocabulary_machine_name_load($vocabulary);
		$term = new stdClass();
		$term->name = $term_name;
		$term->vid = $vobj->vid;
		taxonomy_term_save($term);
		$tid = $term->tid;
	}
	return $tid;
}

/***  syncing with course outlines */
function _sync_outline($term) { // four digit code ie '1147'

	// get term id
	$termId = _get_term($term);
	// get all course offering nodes with the term
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'eval_course_offering')
		->propertyCondition('status', 1)
		->fieldCondition('field_eval_term', 'target_id', $termId, '=');
	$result = $query->execute();

	if (!empty($result['node'])) {
		$nids = array_keys($result['node']);

		foreach ($nids as $nid) {
			$node = node_load($nid, NULL, TRUE);
			$title = explode(" ", $node->title);

			// get term name information
			$termId = $node->field_eval_term['und'][0]['target_id'];
			$myTerm = node_load($termId);
			$terms = explode(" ", $myTerm->title);

			$outlineNode = new OutlineApi;
			$outlineNode->setYear($terms[1]); 
			$outlineNode->setTerm($terms[0]);
			$outlineNode->setDepartment($title[0]);
			$outlineNode->setNumber($title[1]);
			$outlineNode->setSection($title[2]);
			$myOutline = $outlineNode->runOutlineReport();

			$node->field_name['und'][0]['value'] = $myOutline['info']['title'];
			$node->field_description['und'][0]['value'] = $myOutline['info']['description'];
			$node->field_instructor['und'][0]['value'] = $myOutline['instructor'][0]['name']; 
			node_save($node);
		}
	}
}
