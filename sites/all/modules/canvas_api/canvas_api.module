<?php
/**
 * @file
 * This module provides classes and functions
 * interacting with Canvas
 * Adam Young 2014
 *
 */
class CanvasApi {
    public $count = 0;
    public $token = "Bearer 2jxNJRvwLidoZQKz8rcbtXZwiKoXn86meNEy27Bi7tc1UtbhHiye7vJPoGuLRZmX";
    public $resource_path;
    public $data_key = '';
    public $data_value = '';

    public function setResourcePath($newval) // ie /api/v1/courses
    {
        $this->resource_path = $newval;
    }

    public function setParameter($newval)
    {
        $this->parameter = $newval;
    }

    public function getParameter()
    {
        return $this->parameter;
    }

    public function getResourcePath()
    {
        return $this->resource_path;
    }

    public function setPerPage($newval)
    {
        $this->per_page = $newval;
    }

    public function setPage($newval)
    {
        $this->page = $newval;
    }

    public function runReport($param='GET', $type='count') {
	if (isset($this->page, $this->per_page)) {
        $myResource = "https://canvas.sfu.ca".$this->resource_path."?per_page=".$this->per_page."&page=".$this->page;
	} else {
        $myResource = "https://canvas.sfu.ca".$this->resource_path;
	}
        $data = $this->parameter;
        $options = array(
            'method' => "$param", // HTTP Request Type
            'data' => $data, // Parameters
            // 'data' => 'enrollment_term_id=30',
	    'timeout' => 600,
            'headers' => array(	'Content-Type' => 'application/x-www-form-urlencoded',
            "Authorization" => $this->token), // Access token
        );

        $raw = drupal_http_request ($myResource,$options);
        if ($raw->data) {
            $json = $raw->data;
            $count = sizeof(json_decode($json));
        }

        if ($type == 'count') {
            return $count;
        } elseif($type == 'json') {
            return json_decode($json);
	} elseif($type == 'pages') {
		// return $raw->headers['link'];
		$pages = array();
		preg_match_all("/\?page=(.*?)\&/", $raw->headers['link'], $pages);
		return $pages[1][3];
	}
    } // this function
} // this class

class CanvasReport extends CanvasApi {

    public $course_id;
    public $term;
    public $term_code;

    public function setCourseId($newval) {
        $this->course_id = $newval;
    }

    public function getCourseId() {
        return $this->course_id;
    }

    public function setTerm($newval) { // ie Fall 2013
        $this->term = $newval;
    }

    public function getTerm() {
        return $this->term;
    }

    public function setTermCode($newval) { // ie 1144
        $this->term_code = $newval;
    }

    public function getTermCode() {
        return $this->term_code;
    }

    public function getNameFromCid() {
        $this->resource_path = "/api/v1/courses/".$this->course_id;
        $long_name = $this->runReport('GET', 'json');
        $vars = explode(" ", $long_name->name);
        $courseIn = $vars[0];
        $section = $vars[1];
        // parse course code out with space
        $courseSplit = preg_split('/(?=\d)/', $courseIn, 2);
        $department = $courseSplit[0];
        $courseCode = implode(' ', $courseSplit);

        return $courseCode." ".$section;
    }

    public function getTermFromCid() {
        $this->resource_path = "/api/v1/courses/".$this->course_id;
        $course = $this->runReport('GET', 'json');
        return substr($course->sis_course_id, 0, 4);
    }

    // counts of course content
    //
    public function numStudents() {
        $this->resource_path = "/api/v1/courses/".$this->course_id."/users";
	$this->parameter = 'enrollment_type=student';
	$this->per_page = '150';
	$this->page = '1';
        return $this->runReport();
    }

    public function numCourses() {
        $this->resource_path = "/api/v1/accounts/12/courses";
	$this->parameter = 'enrollment_term_id='.$this->term_code;
	$this->per_page = '500';
	$this->page = '1';
        $data = $this->runReport('GET', 'count');
	return $data;
    }

    public function numAssignments() {
        $this->resource_path = "/api/v1/courses/".$this->course_id."/assignments";
	$this->per_page = '500';
	$this->page = '1';
        return $this->runReport();
    }

    public function numExternalTools() {
        $this->resource_path = "/api/v1/courses/".$this->course_id."/external_tools";
	$this->per_page = '500';
	$this->page = '1';
        return $this->runReport();
    }

    public function numDiscussions() {
        $this->resource_path = "/api/v1/courses/".$this->course_id."/discussion_topics";
	$this->per_page = '500';
	$this->page = '1';
        return $this->runReport();
    }

    public function numQuizzes() {
        $this->resource_path = "/api/v1/courses/".$this->course_id."/quizzes";
	$this->per_page = '500';
	$this->page = '1';
        return $this->runReport();
    }

    public function getCourses() { // need to loop through each and filter out term
        $this->resource_path = "/api/v1/accounts/12/courses";
	$this->per_page = '20';
	$this->page = 1;
	$this->parameter = 'enrollment_term_id='.$this->term_code;

	// get number of pages to cycle through
	$count = $this->runReport('GET', 'pages');

	$list = array();
	for ($x = 1; $x <= $count; $x++) {
		$this->page = $x;
		$myData = $this->runReport('GET', 'json');
		foreach($myData as $d) {
			$list[$d->id] = $d->course_code;
		}
	}
	// end loop

	return $list;
    }

}

